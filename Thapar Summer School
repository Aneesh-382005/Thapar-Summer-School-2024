{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":81971,"databundleVersionId":8916601,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/aneeshgrover/thapar-summer-school?scriptVersionId=185308180\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import GridSearchCV\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-25T06:15:42.565194Z","iopub.execute_input":"2024-06-25T06:15:42.565858Z","iopub.status.idle":"2024-06-25T06:15:42.573459Z","shell.execute_reply.started":"2024-06-25T06:15:42.565826Z","shell.execute_reply":"2024-06-25T06:15:42.572475Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"/kaggle/input/thapar-summer-school-2024/sample_submission.csv\n/kaggle/input/thapar-summer-school-2024/train.csv\n/kaggle/input/thapar-summer-school-2024/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Loading the data","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/thapar-summer-school-2024/train.csv')\ntest = pd.read_csv('/kaggle/input/thapar-summer-school-2024/test.csv')\nsample_submission = pd.read_csv('/kaggle/input/thapar-summer-school-2024/sample_submission.csv')\n\nprint(\"\\nTrain Data : \")\nprint(train.head())\n\nprint(\"\\nTest Data : \")\nprint(test.head())\n\nprint(\"\\nSample Submission : \")\nprint(sample_submission.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:44.160197Z","iopub.execute_input":"2024-06-25T06:15:44.160526Z","iopub.status.idle":"2024-06-25T06:15:44.231041Z","shell.execute_reply.started":"2024-06-25T06:15:44.1605Z","shell.execute_reply":"2024-06-25T06:15:44.230165Z"},"trusted":true},"execution_count":70,"outputs":[{"name":"stdout","text":"\nTrain Data : \n   id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders Edema  \\\n0   0     999  D-penicillamine  21532   M       N            N       N     N   \n1   1    2574          Placebo  19237   F       N            N       N     N   \n2   2    3428          Placebo  13727   F       N            Y       Y     Y   \n3   3    2576          Placebo  18460   F       N            N       N     N   \n4   4     788          Placebo  16658   F       N            Y       N     N   \n\n   Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  Tryglicerides  \\\n0        2.3        316.0     3.35   172.0    1601.0  179.80           63.0   \n1        0.9        364.0     3.54    63.0    1440.0  134.85           88.0   \n2        3.3        299.0     3.55   131.0    1029.0  119.35           50.0   \n3        0.6        256.0     3.50    58.0    1653.0   71.30           96.0   \n4        1.1        346.0     3.65    63.0    1181.0  125.55           96.0   \n\n   Platelets  Prothrombin  Stage Status  \n0      394.0          9.7    3.0      D  \n1      361.0         11.0    3.0      C  \n2      199.0         11.7    4.0      D  \n3      269.0         10.7    3.0      C  \n4      298.0         10.6    4.0      C  \n\nTest Data : \n     id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n0  7905    3839  D-penicillamine  19724   F       N            Y       N   \n1  7906    2468  D-penicillamine  14975   F       N            N       N   \n2  7907      51          Placebo  13149   F       N            Y       N   \n3  7908    2330  D-penicillamine  20510   F       N            N       N   \n4  7909    1615  D-penicillamine  21904   F       N            Y       N   \n\n  Edema  Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  \\\n0     N        1.2        546.0     3.37    65.0    1636.0  151.90   \n1     N        1.1        660.0     4.22    94.0    1257.0  151.90   \n2     Y        2.0        151.0     2.96    46.0     961.0   69.75   \n3     N        0.6        293.0     3.85    40.0     554.0  125.55   \n4     N        1.4        277.0     2.97   121.0    1110.0  125.00   \n\n   Tryglicerides  Platelets  Prothrombin  Stage  \n0           90.0      430.0         10.6    2.0  \n1          155.0      227.0         10.0    2.0  \n2          101.0      213.0         13.0    4.0  \n3           56.0      270.0         10.6    2.0  \n4          126.0      221.0          9.8    1.0  \n\nSample Submission : \n     id  Status_C  Status_CL  Status_D\n0  7905  0.628084   0.034788  0.337128\n1  7906  0.628084   0.034788  0.337128\n2  7907  0.628084   0.034788  0.337128\n3  7908  0.628084   0.034788  0.337128\n4  7909  0.628084   0.034788  0.337128\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Exploring the Data","metadata":{}},{"cell_type":"code","source":"print(\"\\nTrain Data Shape\", train.shape)\nprint(\"Test Data Shapa\", test.shape)\n\nprint(\"\\nMissing Values in Train Data: \")\nprint(train.isnull().sum())\n\nprint(\"\\nMissing Values in Test data: \")\nprint(train.isnull().sum())\n\nprint(\"/nTrain Data Summary\")\nprint(train.describe())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:44.232704Z","iopub.execute_input":"2024-06-25T06:15:44.23338Z","iopub.status.idle":"2024-06-25T06:15:44.280461Z","shell.execute_reply.started":"2024-06-25T06:15:44.233337Z","shell.execute_reply":"2024-06-25T06:15:44.279663Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stdout","text":"\nTrain Data Shape (7905, 20)\nTest Data Shapa (5271, 19)\n\nMissing Values in Train Data: \nid               0\nN_Days           0\nDrug             0\nAge              0\nSex              0\nAscites          0\nHepatomegaly     0\nSpiders          0\nEdema            0\nBilirubin        0\nCholesterol      0\nAlbumin          0\nCopper           0\nAlk_Phos         0\nSGOT             0\nTryglicerides    0\nPlatelets        0\nProthrombin      0\nStage            0\nStatus           0\ndtype: int64\n\nMissing Values in Test data: \nid               0\nN_Days           0\nDrug             0\nAge              0\nSex              0\nAscites          0\nHepatomegaly     0\nSpiders          0\nEdema            0\nBilirubin        0\nCholesterol      0\nAlbumin          0\nCopper           0\nAlk_Phos         0\nSGOT             0\nTryglicerides    0\nPlatelets        0\nProthrombin      0\nStage            0\nStatus           0\ndtype: int64\n/nTrain Data Summary\n                id       N_Days           Age    Bilirubin  Cholesterol  \\\ncount  7905.000000  7905.000000   7905.000000  7905.000000  7905.000000   \nmean   3952.000000  2030.173308  18373.146490     2.594485   350.561923   \nstd    2282.121272  1094.233744   3679.958739     3.812960   195.379344   \nmin       0.000000    41.000000   9598.000000     0.300000   120.000000   \n25%    1976.000000  1230.000000  15574.000000     0.700000   248.000000   \n50%    3952.000000  1831.000000  18713.000000     1.100000   298.000000   \n75%    5928.000000  2689.000000  20684.000000     3.000000   390.000000   \nmax    7904.000000  4795.000000  28650.000000    28.000000  1775.000000   \n\n           Albumin       Copper      Alk_Phos         SGOT  Tryglicerides  \\\ncount  7905.000000  7905.000000   7905.000000  7905.000000    7905.000000   \nmean      3.548323    83.902846   1816.745250   114.604602     115.340164   \nstd       0.346171    75.899266   1903.750657    48.790945      52.530402   \nmin       1.960000     4.000000    289.000000    26.350000      33.000000   \n25%       3.350000    39.000000    834.000000    75.950000      84.000000   \n50%       3.580000    63.000000   1181.000000   108.500000     104.000000   \n75%       3.770000   102.000000   1857.000000   137.950000     139.000000   \nmax       4.640000   588.000000  13862.400000   457.250000     598.000000   \n\n         Platelets  Prothrombin        Stage  \ncount  7905.000000  7905.000000  7905.000000  \nmean    265.228969    10.629462     3.032511  \nstd      87.465579     0.781735     0.866511  \nmin      62.000000     9.000000     1.000000  \n25%     211.000000    10.000000     2.000000  \n50%     265.000000    10.600000     3.000000  \n75%     316.000000    11.000000     4.000000  \nmax     563.000000    18.000000     4.000000  \n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Visualization","metadata":{}},{"cell_type":"markdown","source":"### 1. Histogram","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (8, 6))\nplt.hist(train['Age']/365, bins = 30, edgecolor = 'black')\nplt.xlabel('Age(Years)')\nplt.ylabel('Frequency')\nplt.title('Histogram of Age (Years)')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:44.432812Z","iopub.execute_input":"2024-06-25T06:15:44.433495Z","iopub.status.idle":"2024-06-25T06:15:44.741738Z","shell.execute_reply.started":"2024-06-25T06:15:44.433468Z","shell.execute_reply":"2024-06-25T06:15:44.740912Z"},"trusted":true},"execution_count":72,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### 2. Count Plots","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (8, 6))\nsns.countplot(x = 'Sex', data = train)\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Count of Male and Female')","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:44.743159Z","iopub.execute_input":"2024-06-25T06:15:44.743437Z","iopub.status.idle":"2024-06-25T06:15:44.94838Z","shell.execute_reply.started":"2024-06-25T06:15:44.743412Z","shell.execute_reply":"2024-06-25T06:15:44.947487Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Count of Male and Female')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Preprocessing the Data","metadata":{}},{"cell_type":"code","source":"print(train.columns)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:45.896097Z","iopub.execute_input":"2024-06-25T06:15:45.896777Z","iopub.status.idle":"2024-06-25T06:15:45.902858Z","shell.execute_reply.started":"2024-06-25T06:15:45.896733Z","shell.execute_reply":"2024-06-25T06:15:45.901783Z"},"trusted":true},"execution_count":74,"outputs":[{"name":"stdout","text":"Index(['id', 'N_Days', 'Drug', 'Age', 'Sex', 'Ascites', 'Hepatomegaly',\n       'Spiders', 'Edema', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin',\n       'Stage', 'Status'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Drop Unique Columns","metadata":{}},{"cell_type":"code","source":"def dropUniqueColumns(dataFrame):\n    \n    uniqueCounts = dataFrame.nunique()\n    \n    uniqueColumns = uniqueCounts[uniqueCounts == 1].index\n    \n    dataFrame.drop(columns = uniqueColumns, inplace = True)\n    \n    return dataFrame\n\ntrain = dropUniqueColumns(train)\ntest = dropUniqueColumns(test)\nprint(train.columns)\nprint(test.columns)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:47.278995Z","iopub.execute_input":"2024-06-25T06:15:47.279539Z","iopub.status.idle":"2024-06-25T06:15:47.3049Z","shell.execute_reply.started":"2024-06-25T06:15:47.279504Z","shell.execute_reply":"2024-06-25T06:15:47.303999Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"Index(['id', 'N_Days', 'Drug', 'Age', 'Sex', 'Ascites', 'Hepatomegaly',\n       'Spiders', 'Edema', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin',\n       'Stage', 'Status'],\n      dtype='object')\nIndex(['id', 'N_Days', 'Drug', 'Age', 'Sex', 'Ascites', 'Hepatomegaly',\n       'Spiders', 'Edema', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin',\n       'Stage'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Separate Features and Target","metadata":{}},{"cell_type":"code","source":"X_train = train.drop(['Status'], axis = 1)\nY_train = train['Status']\n\nprint(X_train.columns)\nprint(Y_train.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:49.977037Z","iopub.execute_input":"2024-06-25T06:15:49.977847Z","iopub.status.idle":"2024-06-25T06:15:49.985654Z","shell.execute_reply.started":"2024-06-25T06:15:49.977816Z","shell.execute_reply":"2024-06-25T06:15:49.984821Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stdout","text":"Index(['id', 'N_Days', 'Drug', 'Age', 'Sex', 'Ascites', 'Hepatomegaly',\n       'Spiders', 'Edema', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin',\n       'Stage'],\n      dtype='object')\n0    D\n1    C\n2    D\n3    C\n4    C\nName: Status, dtype: object\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Label Encoding Categorial Values","metadata":{}},{"cell_type":"code","source":"categorialColumns = ['Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema']\n\nlabelEncoders = {}\nfor column in categorialColumns:\n    le = LabelEncoder()\n    X_train[column] = le.fit_transform(X_train[column])\n    test[column] = le.transform(test[column])\n    labelEncoders[column] = le\n\nprint(X_train.head())\nprint(test.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:50.492292Z","iopub.execute_input":"2024-06-25T06:15:50.492574Z","iopub.status.idle":"2024-06-25T06:15:50.537467Z","shell.execute_reply.started":"2024-06-25T06:15:50.492551Z","shell.execute_reply":"2024-06-25T06:15:50.536537Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"   id  N_Days  Drug    Age  Sex  Ascites  Hepatomegaly  Spiders  Edema  \\\n0   0     999     0  21532    1        0             0        0      0   \n1   1    2574     1  19237    0        0             0        0      0   \n2   2    3428     1  13727    0        0             1        1      2   \n3   3    2576     1  18460    0        0             0        0      0   \n4   4     788     1  16658    0        0             1        0      0   \n\n   Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  Tryglicerides  \\\n0        2.3        316.0     3.35   172.0    1601.0  179.80           63.0   \n1        0.9        364.0     3.54    63.0    1440.0  134.85           88.0   \n2        3.3        299.0     3.55   131.0    1029.0  119.35           50.0   \n3        0.6        256.0     3.50    58.0    1653.0   71.30           96.0   \n4        1.1        346.0     3.65    63.0    1181.0  125.55           96.0   \n\n   Platelets  Prothrombin  Stage  \n0      394.0          9.7    3.0  \n1      361.0         11.0    3.0  \n2      199.0         11.7    4.0  \n3      269.0         10.7    3.0  \n4      298.0         10.6    4.0  \n     id  N_Days  Drug    Age  Sex  Ascites  Hepatomegaly  Spiders  Edema  \\\n0  7905    3839     0  19724    0        0             1        0      0   \n1  7906    2468     0  14975    0        0             0        0      0   \n2  7907      51     1  13149    0        0             1        0      2   \n3  7908    2330     0  20510    0        0             0        0      0   \n4  7909    1615     0  21904    0        0             1        0      0   \n\n   Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  Tryglicerides  \\\n0        1.2        546.0     3.37    65.0    1636.0  151.90           90.0   \n1        1.1        660.0     4.22    94.0    1257.0  151.90          155.0   \n2        2.0        151.0     2.96    46.0     961.0   69.75          101.0   \n3        0.6        293.0     3.85    40.0     554.0  125.55           56.0   \n4        1.4        277.0     2.97   121.0    1110.0  125.00          126.0   \n\n   Platelets  Prothrombin  Stage  \n0      430.0         10.6    2.0  \n1      227.0         10.0    2.0  \n2      213.0         13.0    4.0  \n3      270.0         10.6    2.0  \n4      221.0          9.8    1.0  \n","output_type":"stream"}]},{"cell_type":"code","source":"numericalColumnsTrain = X_train.select_dtypes(include = ['float64', 'int64']).columns\nnumericalColumnsTest = test.select_dtypes(include = ['float64', 'int64']).columns\n\nscaler = StandardScaler()\n\nX_train[numericalColumnsTrain] = scaler.fit_transform(X_train[numericalColumnsTrain])\ntest[numericalColumnsTest] = scaler.transform(test[numericalColumnsTest])\n\nprint(X_train.head())\nprint(test.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:15:50.655219Z","iopub.execute_input":"2024-06-25T06:15:50.655488Z","iopub.status.idle":"2024-06-25T06:15:50.68938Z","shell.execute_reply.started":"2024-06-25T06:15:50.655464Z","shell.execute_reply":"2024-06-25T06:15:50.688551Z"},"trusted":true},"execution_count":78,"outputs":[{"name":"stdout","text":"         id    N_Days      Drug       Age       Sex   Ascites  Hepatomegaly  \\\n0 -1.731832 -0.942430 -1.014655  0.858448  3.590654 -0.224718     -1.022906   \n1 -1.731393  0.497025  0.985557  0.234760 -0.278501 -0.224718     -1.022906   \n2 -1.730955  1.277529  0.985557 -1.262634 -0.278501 -0.224718      0.977607   \n3 -1.730517  0.498852  0.985557  0.023603 -0.278501 -0.224718     -1.022906   \n4 -1.730079 -1.135271  0.985557 -0.466107 -0.278501 -0.224718      0.977607   \n\n    Spiders     Edema  Bilirubin  Cholesterol   Albumin    Copper  Alk_Phos  \\\n0 -0.570095 -0.303472  -0.077237    -0.176908 -0.572940  1.160785 -0.113334   \n1 -0.570095 -0.303472  -0.444429     0.068784 -0.024043 -0.275420 -0.197909   \n2  1.754093  4.102312   0.185043    -0.263923  0.004846  0.620561 -0.413812   \n3 -0.570095 -0.303472  -0.523113    -0.484022 -0.139601 -0.341301 -0.086017   \n4 -0.570095 -0.303472  -0.391973    -0.023351  0.293739 -0.275420 -0.333965   \n\n       SGOT  Tryglicerides  Platelets  Prothrombin     Stage  \n0  1.336304      -0.996442   1.472341    -1.189049 -0.037522  \n1  0.414968      -0.520497   1.095026     0.474024 -0.037522  \n2  0.097266      -1.243933  -0.757248     1.369525  1.116605  \n3 -0.887610      -0.368194   0.043117     0.090238 -0.037522  \n4  0.224347      -0.368194   0.374697    -0.037691  1.116605  \n         id    N_Days      Drug       Age       Sex   Ascites  Hepatomegaly  \\\n0  1.732270  1.653158 -1.014655  0.367107 -0.278501 -0.224718      0.977607   \n1  1.732708  0.400147 -1.014655 -0.923478 -0.278501 -0.224718     -1.022906   \n2  1.733146 -1.808844  0.985557 -1.419711 -0.278501 -0.224718      0.977607   \n3  1.733585  0.274023 -1.014655  0.580710 -0.278501 -0.224718     -1.022906   \n4  1.734023 -0.379443 -1.014655  0.959543 -0.278501 -0.224718      0.977607   \n\n    Spiders     Edema  Bilirubin  Cholesterol   Albumin    Copper  Alk_Phos  \\\n0 -0.570095 -0.303472  -0.365745     1.000364 -0.515161 -0.249068 -0.094948   \n1 -0.570095 -0.303472  -0.391973     1.583881  1.940429  0.133042 -0.294041   \n2 -0.570095  4.102312  -0.155921    -1.021472 -1.699623 -0.499415 -0.449533   \n3 -0.570095 -0.303472  -0.523113    -0.294635  0.871525 -0.578472 -0.663335   \n4 -0.570095 -0.303472  -0.313289    -0.376532 -1.670733  0.488799 -0.371262   \n\n       SGOT  Tryglicerides  Platelets  Prothrombin     Stage  \n0  0.764440      -0.482421   1.883958    -0.037691 -1.191649  \n1  0.764440       0.755036  -0.437102    -0.805263 -1.191649  \n2 -0.919380      -0.273005  -0.597175     3.032598  1.116605  \n3  0.224347      -1.129706   0.054551    -0.037691 -1.191649  \n4  0.213073       0.202940  -0.505705    -1.061120 -2.345776  \n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model Training","metadata":{}},{"cell_type":"code","source":"model = RandomForestClassifier(random_state = 42)\n\nparam_grid = {\n    'n_estimators' : [50, 100, 200], \n    'max_depth' : [None, 10, 20], \n    'min_samples_split' : [2, 5, 10], \n    'min_samples_leaf' : [1, 2, 4]\n}\n\ngrid_search = GridSearchCV(estimator = model, param_grid = param_grid, cv = 3, scoring = 'neg_log_loss', verbose = 2)\n\ngrid_search.fit(X_train, Y_train)\n\nprint(\"Best Parameters Found : \")\nprint(grid_search.best_params_)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:19:25.076327Z","iopub.execute_input":"2024-06-25T06:19:25.077441Z","iopub.status.idle":"2024-06-25T06:24:16.785014Z","shell.execute_reply.started":"2024-06-25T06:19:25.077403Z","shell.execute_reply":"2024-06-25T06:24:16.784113Z"},"trusted":true},"execution_count":82,"outputs":[{"name":"stdout","text":"Fitting 3 folds for each of 81 candidates, totalling 243 fits\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   2.3s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   2.3s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   2.3s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   1.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.3s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   2.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   2.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   2.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   1.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   1.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.0s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   1.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.4s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   1.7s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   1.7s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.4s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.4s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   1.7s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.4s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.4s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   0.9s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   1.8s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   1.7s\n[CV] END max_depth=10, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   1.7s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.2s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.2s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   2.3s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   2.3s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   2.3s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   1.2s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   1.2s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.3s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.3s\n[CV] END max_depth=20, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   2.3s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   2.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.2s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   2.2s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   2.1s\n[CV] END max_depth=20, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   2.1s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   1.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   1.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   1.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.1s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.1s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.5s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=50; total time=   0.6s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.1s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.1s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.0s\n[CV] END max_depth=20, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.1s\nBest Parameters Found : \n{'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 100}\n","output_type":"stream"}]},{"cell_type":"code","source":"best_model = RandomForestClassifier(random_state = 42,\n                                   n_estimators = grid_search.best_params_['n_estimators'],\n                                   max_depth = grid_search.best_params_['max_depth'], \n                                   min_samples_split = grid_search.best_params_['min_samples_split'], \n                                   min_samples_leaf = grid_search.best_params_['min_samples_leaf'])\nbest_model.fit(X_train, Y_train)\n\nvaluePredictions = best_model.predict_proba(test)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:24:16.787002Z","iopub.execute_input":"2024-06-25T06:24:16.787462Z","iopub.status.idle":"2024-06-25T06:24:18.022725Z","shell.execute_reply.started":"2024-06-25T06:24:16.787421Z","shell.execute_reply":"2024-06-25T06:24:18.021767Z"},"trusted":true},"execution_count":83,"outputs":[]},{"cell_type":"markdown","source":"# Submission File","metadata":{}},{"cell_type":"code","source":"Submission = pd.DataFrame(valuePredictions, columns=[\"Status_C\", \"Status_CL\", \"Status_D\"])\nsmth = pd.read_csv('/kaggle/input/thapar-summer-school-2024/test.csv')\nSubmission['id'] = smth['id']\nSubmission = Submission[['id', 'Status_C', 'Status_CL', 'Status_D']]","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:24:18.02399Z","iopub.execute_input":"2024-06-25T06:24:18.024306Z","iopub.status.idle":"2024-06-25T06:24:18.053423Z","shell.execute_reply.started":"2024-06-25T06:24:18.024278Z","shell.execute_reply":"2024-06-25T06:24:18.052568Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"Submission.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file created successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-06-25T06:24:18.055115Z","iopub.execute_input":"2024-06-25T06:24:18.055395Z","iopub.status.idle":"2024-06-25T06:24:18.099392Z","shell.execute_reply.started":"2024-06-25T06:24:18.05537Z","shell.execute_reply":"2024-06-25T06:24:18.098578Z"},"trusted":true},"execution_count":85,"outputs":[{"name":"stdout","text":"Submission file created successfully.\n","output_type":"stream"}]}]}