{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":81971,"databundleVersionId":8916601,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/aneeshgrover/thapar-summer-school?scriptVersionId=185308180\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import GridSearchCV\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-25T04:51:01.455531Z","iopub.execute_input":"2024-06-25T04:51:01.455873Z","iopub.status.idle":"2024-06-25T04:51:03.903327Z","shell.execute_reply.started":"2024-06-25T04:51:01.455843Z","shell.execute_reply":"2024-06-25T04:51:03.90245Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Loading the data","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/thapar-summer-school-2024/train.csv')\ntest = pd.read_csv('/kaggle/input/thapar-summer-school-2024/test.csv')\nsample_submission = pd.read_csv('/kaggle/input/thapar-summer-school-2024/sample_submission.csv')\n\nprint(\"\\nTrain Data : \")\nprint(train.head())\n\nprint(\"\\nTest Data : \")\nprint(test.head())\n\nprint(\"\\nSample Submission : \")\nprint(sample_submission.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:03.905155Z","iopub.execute_input":"2024-06-25T04:51:03.905833Z","iopub.status.idle":"2024-06-25T04:51:04.015563Z","shell.execute_reply.started":"2024-06-25T04:51:03.905798Z","shell.execute_reply":"2024-06-25T04:51:04.014757Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Exploring the Data","metadata":{}},{"cell_type":"code","source":"print(\"\\nTrain Data Shape\", train.shape)\nprint(\"Test Data Shapa\", test.shape)\n\nprint(\"\\nMissing Values in Train Data: \")\nprint(train.isnull().sum())\n\nprint(\"\\nMissing Values in Test data: \")\nprint(train.isnull().sum())\n\nprint(\"/nTrain Data Summary\")\nprint(train.describe())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.016671Z","iopub.execute_input":"2024-06-25T04:51:04.016996Z","iopub.status.idle":"2024-06-25T04:51:04.067003Z","shell.execute_reply.started":"2024-06-25T04:51:04.01697Z","shell.execute_reply":"2024-06-25T04:51:04.066148Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Visualization","metadata":{}},{"cell_type":"markdown","source":"### 1. Histogram","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (8, 6))\nplt.hist(train['Age']/365, bins = 30, edgecolor = 'black')\nplt.xlabel('Age(Years)')\nplt.ylabel('Frequency')\nplt.title('Histogram of Age (Years)')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.069707Z","iopub.execute_input":"2024-06-25T04:51:04.070274Z","iopub.status.idle":"2024-06-25T04:51:04.398684Z","shell.execute_reply.started":"2024-06-25T04:51:04.070249Z","shell.execute_reply":"2024-06-25T04:51:04.397825Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2. Count Plots","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (8, 6))\nsns.countplot(x = 'Sex', data = train)\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.title('Count of Male and Female')","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.399972Z","iopub.execute_input":"2024-06-25T04:51:04.400736Z","iopub.status.idle":"2024-06-25T04:51:04.682679Z","shell.execute_reply.started":"2024-06-25T04:51:04.400701Z","shell.execute_reply":"2024-06-25T04:51:04.681736Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Preprocessing the Data","metadata":{}},{"cell_type":"code","source":"print(train.columns)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.683998Z","iopub.execute_input":"2024-06-25T04:51:04.684638Z","iopub.status.idle":"2024-06-25T04:51:04.689608Z","shell.execute_reply.started":"2024-06-25T04:51:04.684604Z","shell.execute_reply":"2024-06-25T04:51:04.688664Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Drop Unique Columns","metadata":{}},{"cell_type":"code","source":"def dropUniqueColumns(dataFrame):\n    \n    uniqueCounts = dataFrame.nunique()\n    \n    uniqueColumns = uniqueCounts[uniqueCounts == 1].index\n    \n    dataFrame.drop(columns = uniqueColumns, inplace = True)\n    \n    return dataFrame\n\ntrain = dropUniqueColumns(train)\ntest = dropUniqueColumns(test)\nprint(train.columns)\nprint(test.columns)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.690856Z","iopub.execute_input":"2024-06-25T04:51:04.691232Z","iopub.status.idle":"2024-06-25T04:51:04.724149Z","shell.execute_reply.started":"2024-06-25T04:51:04.691206Z","shell.execute_reply":"2024-06-25T04:51:04.723158Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Separate Features and Target","metadata":{}},{"cell_type":"code","source":"X_train = train.drop(['Status'], axis = 1)\nY_train = train['Status']\n\nprint(X_train.columns)\nprint(Y_train.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.725148Z","iopub.execute_input":"2024-06-25T04:51:04.725393Z","iopub.status.idle":"2024-06-25T04:51:04.732587Z","shell.execute_reply.started":"2024-06-25T04:51:04.725371Z","shell.execute_reply":"2024-06-25T04:51:04.731657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Label Encoding Categorial Values","metadata":{}},{"cell_type":"code","source":"categorialColumns = ['Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema']\n\nlabelEncoders = {}\nfor column in categorialColumns:\n    le = LabelEncoder()\n    X_train[column] = le.fit_transform(X_train[column])\n    test[column] = le.transform(test[column])\n    labelEncoders[column] = le\n\nprint(X_train.head())\nprint(test.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.733704Z","iopub.execute_input":"2024-06-25T04:51:04.733969Z","iopub.status.idle":"2024-06-25T04:51:04.7803Z","shell.execute_reply.started":"2024-06-25T04:51:04.733946Z","shell.execute_reply":"2024-06-25T04:51:04.779093Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Scaling Numerical Features","metadata":{}},{"cell_type":"code","source":"numericalColumnsTrain = X_train.select_dtypes(include = ['float64', 'int64']).columns\nnumericalColumnsTest = test.select_dtypes(include = ['float64', 'int64']).columns\n\nscaler = StandardScaler()\n\nX_train[numericalColumnsTrain] = scaler.fit_transform(X_train[numericalColumnsTrain])\ntest[numericalColumnsTest] = scaler.transform(test[numericalColumnsTest])\n\nprint(X_train.head())\nprint(test.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:56:42.352792Z","iopub.execute_input":"2024-06-25T04:56:42.353162Z","iopub.status.idle":"2024-06-25T04:56:42.392026Z","shell.execute_reply.started":"2024-06-25T04:56:42.353128Z","shell.execute_reply":"2024-06-25T04:56:42.391062Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_valid, Y_train, Y_valid = train_test_split(X_train, Y_train, test_size = 0.2, random_state = 42)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:51:04.821409Z","iopub.execute_input":"2024-06-25T04:51:04.821659Z","iopub.status.idle":"2024-06-25T04:51:04.830558Z","shell.execute_reply.started":"2024-06-25T04:51:04.821636Z","shell.execute_reply":"2024-06-25T04:51:04.829677Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = RandomForestClassifier(random_state = 42)\n\nparam_grid = {\n    'n_estimators' : [50, 100, 200], \n    'max_depth' : [None, 10, 20], \n    'min_samples_split' : [2, 5, 10], \n    'min_samples_leaf' : [1, 2, 4]\n}\n\ngrid_search = GridSearchCV(estimator = model, param_grid = param_grid, cv = 3, scoring = 'neg_log_loss', verbose = 2)\n\ngrid_search.fit(X_train, Y_train)\n\nprint(\"Best Parameters Found : \")\nprint(grid_search.best_params_)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T04:52:29.420691Z","iopub.execute_input":"2024-06-25T04:52:29.421306Z","iopub.status.idle":"2024-06-25T04:56:34.083351Z","shell.execute_reply.started":"2024-06-25T04:52:29.421275Z","shell.execute_reply":"2024-06-25T04:56:34.082464Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_model = RandomForestClassifier(random_state = 42,\n                                   n_estimators = grid_search.best_params_['n_estimators'],\n                                   max_depth = grid_search.best_params_['max_depth'], \n                                   min_samples_split = grid_search.best_params_['min_samples_split'], \n                                   min_samples_leaf = grid_search.best_params_['min_samples_leaf'])\nbest_model.fit(X_train, Y_train)\n\nvaluePredictions = best_model.predict_proba(test)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T05:16:50.131007Z","iopub.execute_input":"2024-06-25T05:16:50.131838Z","iopub.status.idle":"2024-06-25T05:16:52.760655Z","shell.execute_reply.started":"2024-06-25T05:16:50.131806Z","shell.execute_reply":"2024-06-25T05:16:52.759853Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Submission File","metadata":{}},{"cell_type":"code","source":"Submission = pd.DataFrame(valuePredictions, columns=[\"Status_C\", \"Status_CL\", \"Status_D\"])\nsmth = pd.read_csv('/kaggle/input/thapar-summer-school-2024/test.csv')\nSubmission['id'] = smth['id']\nSubmission = Submission[['id', 'Status_C', 'Status_CL', 'Status_D']]","metadata":{"execution":{"iopub.status.busy":"2024-06-25T05:26:22.78661Z","iopub.execute_input":"2024-06-25T05:26:22.786968Z","iopub.status.idle":"2024-06-25T05:26:22.81193Z","shell.execute_reply.started":"2024-06-25T05:26:22.786939Z","shell.execute_reply":"2024-06-25T05:26:22.810971Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"Submission.to_csv(\"submission.csv\", index=False)\nprint(\"Submission file created successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-06-25T05:26:24.94463Z","iopub.execute_input":"2024-06-25T05:26:24.944982Z","iopub.status.idle":"2024-06-25T05:26:24.986228Z","shell.execute_reply.started":"2024-06-25T05:26:24.944952Z","shell.execute_reply":"2024-06-25T05:26:24.985417Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"Submission file created successfully.\n","output_type":"stream"}]}]}